# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from imports import sys, colorsys, QFileDialog, QtCore, QtGui, QtWidgets, Ui_SecondWindow, PixelConverter, ImageColorSeparator

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(350, 450)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 350, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setEnabled(True)
        self.label_2.setGeometry(QtCore.QRect(25, 330, 300, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(12)
        sizePolicy.setVerticalStretch(12)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label_2.setFont(font)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setStyleSheet("color: rgb(130, 142, 155);")
        self.label_2.setLocale(QtCore.QLocale(QtCore.QLocale.Ukrainian, QtCore.QLocale.Ukraine))
        self.label_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_2.setLineWidth(0)
        self.label_2.setMidLineWidth(0)
        self.label_2.setScaledContents(True)
        self.label_2.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_2.setWordWrap(True)
        self.label_2.setIndent(-1)
        self.label_2.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(115, 290, 120, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(115, 400, 120, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 42, 351, 241))
        self.frame.setAcceptDrops(False)
        self.frame.setStyleSheet("image: url(:/logo/color.png);")
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        MainWindow.setCentralWidget(self.centralwidget)

        self.pushButton_2.hide()

        self.retranslateUi(MainWindow)
        self.app_functions(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Lab 1 "))
        self.label.setText(_translate("MainWindow", "Простори кольорів"))
        self.label_2.setText(_translate("MainWindow", "no image uploaded"))
        self.pushButton.setText(_translate("MainWindow", "Upload image"))
        self.pushButton_2.setText(_translate("MainWindow", "Next"))

    def open_window(self):
        self.secondWindow = QtWidgets.QMainWindow()
        self.ui = Ui_SecondWindow(self.imageStyleSheet)
        self.ui.setupUi(self.secondWindow)
        MainWindow.hide()
        self.secondWindow.show()

    def pass_image(self):
        print("passed image")
        print("funcfu: "+str(imageStyleSheet_to_imagePath(self.frame.styleSheet())))
        self.imageStyleSheet = str(self.frame.styleSheet())
        self.ui = Ui_SecondWindow(self.imageStyleSheet)

    def app_functions(self, MainWindow):
        self.pushButton.clicked.connect(self.pushButton_clicked)
        self.pushButton_2.clicked.connect(self.pushButton_2_clicked)
    
    def browse_image(self):
        filename = QFileDialog.getOpenFileName(None, "", "", "*.jpg")
        print(filename)
        return filename

    def pushButton_clicked(self):
        print("pushButton clicked")
        self.image_path = self.browse_image()[0]
        self.label_2.setText(self.image_path)
        if self.image_path != '':
            self.label_2.setText(self.image_path)
            self.frame.setStyleSheet("image: url("+self.image_path+")};")
            self.pushButton_2.show()
        else:
            self.label_2.setText("try again")
            self.frame.setStyleSheet("image: url(:/logo/color.png);")

    def pushButton_2_clicked(self):
        print("pushButton 2 clicked")
        self.drawing()
        self.pass_image()
        self.open_window()

    def drawing(self):
        self.draw_rgb()
        self.draw_hsv()
        self.draw_ycbcr()
        self.draw_cmyk()
        self.draw_grayscale()

        self.draw_yiq()


    def draw_rgb(self):
        self.rgb_to_rgb = lambda x, y, z: (x, y, z)

        self.converter = PixelConverter(3, self.rgb_to_rgb, self.rgb_to_rgb)
        self.separator = ImageColorSeparator(self.image_path, 'RGB', self.converter)
        self.separator.process(
            channel_filter = (
                (0, 0, 0),
                (0, 0, 0),
                (0, 0, 0)
            )
        )

    def draw_yiq(self):
        self.converter = PixelConverter(3, colorsys.rgb_to_yiq, colorsys.yiq_to_rgb)
        self.separator = ImageColorSeparator(self.image_path, 'YIQ', self.converter)
        self.separator.process(
            channel_filter = (
                (1.0, 1.0, 1,0),
                (0.3, 1.0, 0.9),
                (0.3, 0.6, 1.0)
            )
        )

    def draw_hsv(self):
        self.converter = PixelConverter(3, colorsys.rgb_to_hsv, colorsys.hsv_to_rgb)
        self.separator = ImageColorSeparator(self.image_path, 'HSV', self.converter)
        self.separator.process(
            channel_filter = (
                (1.0, 1.0, 1,0),
                (0.3, 1.0, 0.9),
                (0.3, 0.7, 1.0)
            )
        )

    def draw_ycbcr(self):
        def rgb_to_ycbcr(r, g, b):
            return (
                0 + 0.299 * r + 0.587 * g + 0.114 * b,
                0.5 - 0.168736 * r - 0.331264 * g + 0.5 * b,
                0.5 + 0.5 * r - 0.418688 * g - 0.081312 * b
            )

        def ycbcr_to_rgb(y, cb, cr):
            return (
                y + 1.402 * (cr - 0.5),
                y - 0.34414 * (cb - 0.5) - 0.71414 * (cr - 0.5),
                y + 1.1772 * (cb - 0.5)
            )

        self.converter = PixelConverter(3, rgb_to_ycbcr, ycbcr_to_rgb)
        self.separator = ImageColorSeparator(self.image_path, 'YCbCr', self.converter)
        self.separator.process(
            channel_filter = (
                (1.0, 0.5, 0.5),
                (0.6, 1.0, 0.5),
                (0.6, 0.5, 1.0)
            )
        )

    def draw_cmyk(self):
        def rgb_to_cmy(r, g, b):
            return (
                1 - r,
                1 - g, 
                1 - b
            )

        def cmy_to_rgb(c, m, y):
            return (
                1 - c,
                1 - m, 
                1 - y
            )

        self.converter = PixelConverter(3, rgb_to_cmy, cmy_to_rgb)
        self.separator = ImageColorSeparator(self.image_path, 'CMY', self.converter)
        self.separator.process(
            channel_filter = (
                (0, 0, 0),
                (0, 0, 0),
                (0, 0, 0)
            )
        )

    # def draw_cieXYZ(self):


    def draw_grayscale(self):
        def rgb_to_grayscale(r, g, b):
            return (
                0.333 * r + 0.333 * g + 0.333 * b,
                0
            )

        def grayscale_to_rgb(gr, a):
            return (
                gr,
                gr,
                gr
            )

        self.converter = PixelConverter(2, rgb_to_grayscale, grayscale_to_rgb)
        self.separator = ImageColorSeparator(self.image_path, 'GrayScale', self.converter)
        self.separator.process(
            channel_filter = (
                (0.5, 0.5),
                (0.6, 0.5),
            )
        )

def imageStyleSheet_to_imagePath(styleSheet):
    imagePath = styleSheet[11:]
    size = len(imagePath)
    imagePath = imagePath[:size-3]
    return imagePath

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

    
